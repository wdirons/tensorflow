# Dockerfile to build a manylinux 2010 compliant cross-compiler.
#
# Builds a devtoolset gcc/libstdc++ that targets manylinux 2010 compatible
# glibc (2.12) and system libstdc++ (4.4).
#
# To push a new version, run:
# $ docker build -f Dockerfile.rbe.ubuntu16.04-manylinux2010.ppc64le
#  --tag "gcr.io/tensorflow-testing/nosla-ubuntu16.04-manylinux2010.ppc64le" .
# $ docker push gcr.io/tensorflow-testing/nosla-ubuntu16.04-manylinux2010

#FROM ubuntu:16.04 as devtoolset
FROM ubuntu:16.04

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
      bzip2 \
      cpio \
      file \
      flex \
      g++ \
      make \
      patch \
      rpm2cpio \
      unar \
      wget \
      tar \
      xz-utils \
      && \
    rm -rf /var/lib/apt/lists/*

ADD devtoolset/fixlinks.sh fixlinks.sh
ADD devtoolset/build_devtoolset_ppc64el.sh build_devtoolset.sh
ADD devtoolset/rpm-patch.sh rpm-patch.sh

# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-7 in /dt7.
RUN /build_devtoolset.sh devtoolset-7 /dt7
# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-8 in /dt8.
RUN /build_devtoolset.sh devtoolset-8 /dt8

# TODO(klimek): Split up into two different docker images.
#FROM ubuntu:16.04
#COPY --from=devtoolset /dt7 /dt7
#COPY --from=devtoolset /dt8 /dt8

# Copy and run the install scripts.
COPY install/*.sh /install/
ARG DEBIAN_FRONTEND=noninteractive
RUN /install/install_bootstrap_deb_packages.sh
RUN /install/install_deb_packages.sh
RUN /install/install_openblas_ppc64le.sh
RUN /install/install_hdf5_ppc64le.sh
#RUN /install/install_clang.sh
RUN /install/install_bazel_from_source.sh

# Install golang.
RUN /install/install_golang.sh
env GOROOT=/usr/local/go
env PATH=$GOROOT/bin:$PATH

# Install python 3.6.
RUN apt-get update && apt-get install -y zlib1g-dev && \
    wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz && \
    tar xvf Python-3.6.1.tar.xz && \
    cd Python-3.6.1 && \
    ./configure && \
    make altinstall && \
    cd .. && \
    rm -rf Python-3.6.1 Python-3.6.1.tar.xz && \
    pip3.6 install --upgrade pip && \
    update-alternatives --install /usr/local/bin/python3 python3 /usr/local/bin/python3.6 0 && \
    update-alternatives --install /usr/local/bin/pip3 pip3 /usr/local/bin/pip3.6 0
    
RUN /install/install_pip_packages.sh

# TODO(klimek): Figure out a better way to get the right include paths
# forwarded when we install new packages.
RUN ln -s "/usr/include/powerpc64le-linux-gnu/python2.7" "/dt7/usr/include/powerpc64le-linux-gnu/python2.7"
RUN ln -s "/usr/include/powerpc64le-linux-gnu/python2.7" "/dt8/usr/include/powerpc64le-linux-gnu/python2.7"

RUN ln -s "/usr/include/powerpc64le-linux-gnu/python3.6m" "/dt7/usr/include/powerpc64le-linux-gnu/python3.6m"
RUN ln -s "/usr/include/powerpc64le-linux-gnu/python3.6m" "/dt8/usr/include/powerpc64le-linux-gnu/python3.6m"
